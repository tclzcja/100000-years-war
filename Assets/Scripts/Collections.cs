//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

namespace Josh.Collections.Generic
{
	public class List<T> : System.Collections.Generic.List<T>
	{
		private int _Current_Index;

		public T Current {
			get {
				if (this._Current_Index >= this.Count || this._Current_Index < 0) {
					throw (new Exception ("The List is Empty"));
				}

				return this [_Current_Index];
			}
		}

		public void Next ()
		{
			if (_Current_Index < this.Count - 1) {
				_Current_Index++;
			}
			else {
				_Current_Index = 0;
			}
		}

		public void Prev ()
		{
			if (_Current_Index > 0) {
				_Current_Index--;
			}
			else {
				_Current_Index = this.Count - 1;
			}
		}

		public void Kick ()
		{
			this.Remove (this [_Current_Index]);
			if (this.Count > 0) {
				_Current_Index = 0;
			}
		}

		public List ()
		{
			this._Current_Index = 0;
		}

		public List (IEnumerable<T> collection)
		{
			this._Current_Index = 0;
			IEnumerator<T> E = collection.GetEnumerator ();
			E.Reset ();
			while (E.MoveNext()) {
				this.Add (E.Current);
			}
			if (this.Count > 0) {
				_Current_Index = 0;
			}
		}
	}
}

